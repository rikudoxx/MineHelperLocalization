import zipfile
import json
import os
import shutil
import tempfile
import sys


def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\n" + "=" * 50)
    print("–í–µ–ª–∫–æ–º —Ç—É –†—É—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä!")
    print("=" * 50)
    print("1) –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON-–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ JAR-—Ñ–∞–π–ª–∞")
    print("2) –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON-—Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("0) –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print("=" * 50)


def sort_json_from_jar():
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ JAR-—Ñ–∞–π–ª–∞"""
    # 1. –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ JAR-—Ñ–∞–π–ª—É
    jar_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–∞: ").strip()
    jar_path = os.path.normpath(jar_path)

    if not os.path.exists(jar_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {jar_path}")
        return

    print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∞–π–ª–æ–º: {jar_path}")

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –º–æ–¥–∞ –∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞
    mod_name = os.path.basename(jar_path).replace('.jar', '')
    # –ò—â–µ–º –ø–∞–ø–∫—É "instances" –≤ –ø—É—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–Ω—Å—Ç–∞–Ω—Å–∞
    path_parts = jar_path.split(os.sep)
    try:
        instances_index = path_parts.index('.xmcl') + 2  # .xmcl\instances\–ò–º—è_–∏–Ω—Å—Ç–∞–Ω—Å–∞
        instance_name = path_parts[instances_index]
    except (ValueError, IndexError):
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–∞–ø–∫–∏, –≥–¥–µ –ª–µ–∂–∏—Ç –º–æ–¥
        instance_name = os.path.basename(os.path.dirname(jar_path))

    print(f"üîç –ò–Ω—Å—Ç–∞–Ω—Å: {instance_name}, –ú–æ–¥: {mod_name}")

    # 3. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º JAR-—Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_dir = tempfile.mkdtemp()
    print(f"üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_dir}")

    with zipfile.ZipFile(jar_path, 'r') as zip_ref:
        zip_ref.extractall(temp_dir)

    # 4. –ó–ê–ì–†–£–ñ–ê–ï–ú –ú–ê–ü–ü–ò–ù–ì –ò–ó –í–ê–®–ï–ì–û –§–ê–ô–õ–ê (—Ä—É—á–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥!)
    mapping_file = 'language_mapping.json'
    if not os.path.exists(mapping_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ {mapping_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")
        return

    with open(mapping_file, 'r', encoding='utf-8') as f:
        language_mapping = json.load(f)

    print("\n‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞:")
    print(json.dumps(language_mapping, indent=2, ensure_ascii=False))

    # 5. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —è–∑—ã–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang_code = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru): ").strip()
    if lang_code not in language_mapping:
        print(f"‚ùå –Ø–∑—ã–∫ {lang_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ!")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:", ", ".join(language_mapping.keys()))
        return

    filename = language_mapping[lang_code]
    print(f"\n‚û°Ô∏è –†–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∞–π–ª–æ–º: {filename}")

    # 6. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    found_files = []
    for root, _, files in os.walk(temp_dir):
        for file in files:
            if file == filename:
                file_path = os.path.join(root, file)
                found_files.append(file_path)
                print(f"  - –ù–∞–π–¥–µ–Ω: {file_path}")

    if not found_files:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ!")
        return

    # 7. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    for file_path in found_files:
        print(f"  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {file_path}")

        # –ß–∏—Ç–∞–µ–º JSON
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        sorted_data = dict(sorted(data.items()))

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(sorted_data, f, ensure_ascii=False, indent=2)

    # 8. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (unarchived_mods)
    script_dir = os.path.dirname(os.path.abspath(__file__))
    unarchived_dir = os.path.join(script_dir, 'unarchived_mods')
    os.makedirs(unarchived_dir, exist_ok=True)

    # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: unarchived_mods/–ò–Ω—Å—Ç–∞–Ω—Å/mods/–ò–º—è_–º–æ–¥–∞/assets/
    target_dir = os.path.join(unarchived_dir, instance_name, 'mods', mod_name, 'assets')
    os.makedirs(target_dir, exist_ok=True)

    # 9. –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É assets –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ —Ü–µ–ª–µ–≤—É—é
    assets_source = os.path.join(temp_dir, 'assets')
    if os.path.exists(assets_source):
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤: {target_dir}")
        shutil.copytree(assets_source, target_dir, dirs_exist_ok=True)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {target_dir}")

        # 9.1. –û–ß–ò–°–¢–ö–ê: —É–¥–∞–ª—è–µ–º –≤—Å—ë –≤ assets, –∫—Ä–æ–º–µ –ø–∞–ø–∫–∏ lang –∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        print("üßπ –û—á–∏—â–∞—é –ø–∞–ø–∫—É assets –æ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        for mod_dir in os.listdir(target_dir):
            mod_path = os.path.join(target_dir, mod_dir)
            if os.path.isdir(mod_path):
                # –ü—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –º–æ–¥-–ø–∞–ø–∫–µ
                for item in os.listdir(mod_path):
                    item_path = os.path.join(mod_path, item)
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞ "lang", —É–¥–∞–ª—è–µ–º
                    if item != 'lang':
                        if os.path.isdir(item_path):
                            shutil.rmtree(item_path)
                        else:
                            os.remove(item_path)
        print("‚úÖ –õ–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã. –û—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ lang/...")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ assets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–µ!")

    # 10. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    shutil.rmtree(temp_dir)
    print(f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")


def sort_json_directly():
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ JSON-—Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # 1. –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON
    json_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru_ru.json): ").strip()
    json_path = os.path.normpath(json_path)

    if not os.path.exists(json_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {json_path}")
        return

    if not json_path.lower().endswith('.json'):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json")
        return

    print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∞–π–ª–æ–º: {json_path}")

    # 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        sorted_data = dict(sorted(data.items()))

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(sorted_data, f, ensure_ascii=False, indent=2)

        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    while True:
        show_menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ").strip()

        if choice == '1':
            sort_json_from_jar()
        elif choice == '2':
            sort_json_directly()
        elif choice == '0':
            print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –†—É—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 0.")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤
        print("\n" + "=" * 50)


if __name__ == "__main__":
    main()